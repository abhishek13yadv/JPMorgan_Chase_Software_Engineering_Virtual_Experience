From 371686acd8142d022021e745f8ed029b7a4abca1 Mon Sep 17 00:00:00 2001
From: Pratik Mukherjee <pratikmukherjee32@gmail.com>
Date: Fri, 8 May 2020 17:38:53 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 31 +++++++++++++++++++++++++++++--
 src/Graph.tsx | 19 +++++++++++++++++--
 2 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..786d57a 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -6,14 +6,19 @@ import './App.css';
 /**
  * State declaration for <App />
  */
+ 
+ //showGraph property added
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
  * The parent element of the react app.
  * It renders title, button and Graph react element.
  */
+ 
+ //initial state of app is defined
 class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
@@ -22,24 +27,46 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph : false,
     };
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
+   
+   // Graph rendered contunously
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if ( this.state.showGraph )
+    {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
+   
+  // getDataFromServer function updated to perform the required work
   getDataFromServer() {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+
+      let count = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds : ServerRespond[]) => {
+          this.setState({
+            data: serverResponds,
+            showGraph: true
+          });
+        });
+        count++;
+        if(count > 1000)
+        {
+          clearInterval(interval);
+        }
+      }, 100);
     });
   }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..01425f2 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,9 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+ 
+ // HTMLElement extension added
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +34,9 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+	
+	// updating componentDidMount because extension added
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +53,17 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+	  
+	  // Adding more attributes
+	  elem.setAttribute('view', 'y_line');
+	  elem.setAttribute('column-pivots', '["stock"]');
+	  elem.setAttribute('row-pivots', '["timestamp"]');
+	  elem.setAttribute('columns', '["top_ask_price"]');
+	  elem.setAttribute('aggregates', {
+		  "stock":"distinct count",
+		  "top_ask_price":"avg",
+		  "top_bid_price":"avg",
+		  "timestamp":"distinct count"});
     }
   }
 
-- 
2.26.2.windows.1

